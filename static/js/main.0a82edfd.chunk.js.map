{"version":3,"sources":["index.js"],"names":["classNames","require","ArithmeticNode","type","value","this","left","right","operator","State","id","regex","transitions","recoveries","StateMachine","states","start","accept","history","current","length","pop","input","index","test","push","counter","backwardTransition","includes","forwardTransition","InputHandler","machine","brackets","reset","array","i","recover","j","character","join","isAccepting","isComplete","characters","a","slice","b","concat","operatorStates","numberStates","stack","root","operators","numbers","number","top","attachToTree","popped","console","log","tree","previous","calculatePrecedence","Calculator","props","state","placeholder","historyRef","React","createRef","addHistory","bind","setState","key","RegExp","add","updated","handleInput","parseFloat","calculate","inputHandler","process","recent","recentInput","recentAnswer","answer","className","onClick","historyButton","ref","hidden","History","uk-icon","uk-toggle","Input","onChange","event","target","Button","color","clearAll","generateArithmeticTree","toString","Component","list","map","element","reverseIndex","divider","disabled","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a82edfd.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css';\n\nconst classNames = require('classnames');\n\n\n\nclass ArithmeticNode {\n\n    constructor(type, value) {\n        this.type = type;\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n\n    static calculatePrecedence(operator) {\n        if (operator === \"+\" || operator === \"-\") return 0;\n        if (operator === \"%\" || operator === \"/\" || operator === \"x\") return 1;\n        return -1;\n    }\n}\n\n\nclass State {\n    \n    constructor(id, regex, transitions, recoveries) {\n        this.id = id;\n        this.regex = regex;\n        this.transitions = transitions;\n        this.recoveries = recoveries;\n    }\n}\n\n\nclass StateMachine {\n\n    constructor(states, start, accept) {\n        this.history = [];\n        this.states = states;\n        this.start = start;\n        this.accept = accept;\n        this.current = start;\n    }\n\n    reset() {\n        this.current = this.start;\n        this.history = [];\n    }\n\n    backwardTransition() {\n        if (this.history.length === 0) return -1;\n        this.current = this.history.pop();\n        return 1;\n    }\n\n    forwardTransition(input) {\n        for (const index of this.states[this.current].transitions) {\n            let regex = this.states[index].regex;\n            if (index < this.states.length && regex.test(input)) {\n                this.history.push(this.current);\n                this.current = index;\n                return 1;\n            }\n        }\n        return -1;\n    }\n\n    recover(input) {\n        let counter = 0;\n        const recoveries = this.states[this.current].recoveries;\n        if (recoveries.length === 0) return -1;\n        while (this.backwardTransition() !== -1) {\n            counter++;\n            if (recoveries.includes(this.current)) {\n                if (this.forwardTransition(input) !== -1) return counter;\n                break;\n            }\n        }\n        return -1;\n    }\n\n    isAccepting() {\n        return this.accept.includes(this.current);\n    }\n}\n\n\nclass InputHandler {\n\n    constructor() {\n        let states = [\n            new State( 0,     null,         [  1,  2,  3,  4,  5],            [   ]),\n            new State( 1,    /[(]/,         [  1,  2,  3,  4,  5],            [   ]),\n            new State( 2,    /[-]/,                 [  3,  4,  5],            [   ]),\n            new State( 3,    /[0]/,                 [  4,  8, 10],     [ 0,  8,  9]),\n            new State( 4,    /[.]/,                         [  6],     [ 3,  6,  7]),\n            new State( 5,  /[1-9]/,     [  1,  4,  7,  8,  9, 10],            [   ]),\n            new State( 6,  /[0-9]/,         [  1,  6,  8,  9, 10],            [   ]),\n            new State( 7,  /[0-9]/,     [  1,  4,  7,  8,  9, 10],            [   ]),\n            new State( 8, /[%/x+]/,             [  1,  3,  4,  5],            [   ]),\n            new State( 9,    /[-]/,             [  1,  3,  4,  5],            [   ]),\n            new State(10,    /[)]/, [  1,  3,  4,  5,  8,  9, 10],            [   ])\n        ];\n        let start = 0;\n        let accept = [ 3,  5,  6,  7, 10]\n        this.machine = new StateMachine(states, start, accept);\n        this.brackets = 0;\n        this.input = \"\";\n    }\n\n    reset() {\n        this.machine.reset();\n        this.brackets = 0;\n        this.input = \"\";\n    }\n\n    process(input) {\n        this.reset();\n        const array = [];\n        for (let i = 0; i < input.length; i++) {\n            let counter = 0;\n            if (this.machine.forwardTransition(input[i]) === -1) {\n                counter = this.machine.recover(input[i]);\n                if (counter === -1) break;\n            }\n            for (let j = 0; j < counter; j++) {\n                const character = array.pop();\n                if (character === '(') this.brackets--;\n                if (character === ')') this.brackets++;\n            }\n            if (input[i] === '(') this.brackets++;\n            if (input[i] === ')') this.brackets--;\n            if (this.brackets < 0) break;\n            array.push(input[i]);\n        }\n        this.input = array.join('');\n        return this.input;\n    }\n\n    isComplete() {\n        return (this.machine.isAccepting() && this.brackets === 0);\n    }\n\n    generateArithmeticTree() {\n        if (!this.isComplete()) return null;\n        const characters = this.input;\n        const a = this.machine.history.slice(1);\n        const b = [this.machine.current];\n        const states = a.concat(b);\n        const operatorStates = [8, 9];\n        const numberStates = [2, 3, 4, 5, 6, 7];\n        const stack = [{\n            root: null,\n            operators: [],\n            numbers: []\n        }];\n        let i = 0;\n        while (i <= characters.length && i <= states.length) {\n            // state is part of number\n            if (numberStates.includes(states[i])) {\n                // create number from states and characters\n                const array = [];\n                do {\n                    array.push(characters[i]);\n                    i++;\n                } while (i <= characters.length && i <= states.length && numberStates.includes(states[i]));\n                const number = array.join('');\n                const top = stack[stack.length - 1];\n                top.numbers.push(new ArithmeticNode(\"number\", number));\n                // avoid additional i++\n                continue;\n            // state is open bracket\n            } else if (states[i] === 1) {\n                // check for implicit multiplication (either previous was a number or closed bracket)\n                if (i - 1 >= 0 && (numberStates.includes(states[i - 1]) || states[i - 1] === 10)) {\n                    const top = stack[stack.length - 1];\n                    top.operators.push(new ArithmeticNode(\"operator\", \"x\"));\n                    this.attachToTree(top);\n                }\n                stack.push({\n                    root: null,\n                    operators: [],\n                    numbers: []\n                });\n            // state is operator\n            } else if (operatorStates.includes(states[i])) {\n                const operator = characters[i];\n                const top = stack[stack.length - 1];\n                top.operators.push(new ArithmeticNode(\"operator\", operator));\n                this.attachToTree(top);\n            // state is closed bracket\n            } else if (states[i] === 10) {\n                const popped = stack.pop();\n                const top = stack[stack.length - 1];\n                // connect last number to operator if there is one\n                if (popped.operators.length > 0) {\n                    const current = popped.operators[popped.operators.length - 1];\n                    current.right = popped.numbers[popped.numbers.length - 1];\n                }\n                // handle useless stack (useless brackets), which only hold a number\n                if (popped.root === null && popped.numbers.length === 1) {\n                    const number = popped.numbers[popped.numbers.length - 1];\n                    top.numbers.push(number);\n                // handle stack\n                } else {\n                    // not a number, but it does resolve to a number\n                    const number = popped.root;\n                    top.numbers.push(number);\n                }\n                // check for implicit multiplication (previous was closed bracket)\n                if (i + 1 <= characters.length && i + 1 <= states.length && numberStates.includes(states[i + 1])) {\n                    const top = stack[stack.length - 1];\n                    top.operators.push(new ArithmeticNode(\"operator\", \"x\"));\n                    this.attachToTree(top);\n                }\n            }\n            i++;\n        }\n        const top = stack[stack.length - 1];\n        // connect last number to operator if there is one\n        if (top.operators.length > 0) {\n            const current = top.operators[top.operators.length - 1];\n            current.right = top.numbers[top.numbers.length - 1];\n        }\n        // handle useless stack (useless brackets), which only hold a number\n        // needs to be done for expressions with exterior/useless brackets\n        if (top.root === null && top.numbers.length === 1) {\n            const number = top.numbers.pop();\n            top.root = number;\n        }\n        console.log(top);\n        return top.root;\n    }\n\n    attachToTree(tree) {\n        // check if there are two operators or more for precedence comparison\n        if (tree.operators.length >= 2) {\n            const current = tree.operators[tree.operators.length - 1];\n            const previous = tree.operators[tree.operators.length - 2];\n            const currentPrecedence = ArithmeticNode.calculatePrecedence(current.value);\n            const previousPrecedence = ArithmeticNode.calculatePrecedence(previous.value);\n            // extend tree downward (current has more precedence than previous)\n            if (currentPrecedence > previousPrecedence) {\n                current.left = tree.numbers[tree.numbers.length - 1];\n                previous.right = current;\n            // extend tree upward (current has less precedence than previous)\n            } else {\n                current.left = tree.root;\n                previous.right = tree.numbers[tree.numbers.length - 1];\n                tree.root = current;\n            }\n        } else {\n            const current = tree.operators[tree.operators.length - 1];\n            current.left = tree.numbers[tree.numbers.length - 1];\n            tree.root = current;\n        }\n    }\n}\n\n\nclass Calculator extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [],\n            input: \"\",\n            placeholder: \"0\"\n        }\n        this.historyRef = React.createRef();\n        this.addHistory = this.addHistory.bind(this);\n    }\n\n    clearAll() {\n        this.setState({\n            history: [],\n            input: \"\",\n            placeholder: \"0\"\n        })\n    }\n\n    clear() {\n        this.setState({input: \"\"});\n    }\n\n    addHistory(index, key) {\n        const {input, history} = this.state;\n        if (key !== \"input\" && key !== \"answer\") return false;\n        if (0 <= index && index < history.length) {\n            const operators = new RegExp(/[%/x+-]/);\n            if (input.length === 0 || operators.test(input[input.length - 1])) {\n                this.add(history[index][key]);\n            }\n        }\n    }\n\n    add(value) {\n        const {input} = this.state;\n        const updated = input.concat(value);\n        this.handleInput(updated);\n    }\n\n    remove() {\n        const {input} = this.state;\n        let updated = input.slice(0, -1);\n        this.handleInput(updated);\n    }\n\n    calculate(tree) {   \n        if (tree == null) return 0;\n        if (tree.type === \"number\") return parseFloat(tree.value);\n        if (tree.type === \"operator\") {\n            let left, right = 0;\n            // calculate left and right side of operator\n            if (tree.left != null) left = this.calculate(tree.left);\n            if (tree.right != null) right = this.calculate(tree.right);\n            // compute arithmetic expression with left and right numbers\n            if (tree.value === \"%\") {\n                return left % right;\n            } else if (tree.value === \"/\") {\n                return left / right;\n            } else if (tree.value === \"x\") {\n                return left * right;\n            } else if (tree.value === \"+\") {\n                return left + right;\n            } else if (tree.value === \"-\") {\n                return left - right;\n            }\n        }\n        return 0;\n    }\n\n    handleInput(value) {\n        const {inputHandler} = this.props;\n        const updated = inputHandler.process(value);\n        this.setState({input: updated});\n    }\n\n    render() {\n        const {history, input, placeholder} = this.state;\n        let recent = \" \";\n        if (history.length > 0) {\n            const recentInput = history[history.length - 1].input;\n            const recentAnswer = history[history.length - 1].answer;\n            recent = <span><span className=\"uk-link\" onClick={() => {this.addHistory(history.length - 1, \"input\");}}>{recentInput}</span>=<span className=\"uk-link\" onClick={() => {this.addHistory(history.length - 1, \"answer\");}}>{recentAnswer}</span></span>\n        }\n        const historyButton = classNames({\n            \"uk-link\": true,\n            \"uk-hidden\": !(history.length > 1)\n        })\n        return (\n            <div className=\"uk-container uk-padding-large\">\n                <div className=\"uk-grid\">\n                    <div className=\"uk-padding uk-padding-remove-top uk-padding-remove-bottom uk-padding-remove-left uk-width-1-3\">\n                        <div ref={this.historyRef} className=\"history\" hidden>\n                            <History history={history} onClick={this.addHistory}/>\n                        </div>\n                    </div>\n                    <div className=\"uk-padding-remove uk-width-1-3\">\n                        <div className=\"calculator uk-card uk-card-default uk-card-body uk-border-rounded uk-box-shadow-large\">\n                            <div className=\"display uk-width-1-1 uk-margin-bottom\">\n                                <div className=\"uk-width-1-1\">\n                                    <div className=\"recent uk-flex uk-flex-middle uk-width-1-1 uk-margin-remove\">\n                                        <span className={historyButton} uk-icon=\"icon: history\" uk-toggle=\"target: .history; animation: uk-animation-slide-right\"></span>\n                                        <span className=\"uk-width-1-1 uk-text-large uk-margin-remove uk-text-right preserve-characters\">{recent}</span>\n                                    </div>\n                                </div>\n                                <div className=\"uk-width-1-1\">\n                                    <Input value={input} placeholder={placeholder} onChange={(event) => {this.handleInput(event.target.value);}}/>\n                                </div>\n                            </div>\n                            <div className=\"numbers uk-width-1-1\">\n                                <div className=\"uk-grid uk-grid-small uk-child-width-1-4\">\n                                    <Button value=\"AC\" color=\"danger\" onClick={() => {\n                                        this.clearAll();\n                                        if (this.historyRef.current.hidden === false) {\n                                            this.historyRef.current.hidden = true;\n                                        }\n                                    }}/>\n                                    <Button value=\"(\" color=\"secondary\" onClick={() => {this.add(\"(\");}}/>\n                                    <Button value=\")\" color=\"secondary\" onClick={() => {this.add(\")\");}}/>\n                                    <Button value=\"%\" color=\"secondary\" onClick={() => {\n                                        if (input.length === 0) {\n                                            this.add(placeholder + \"%\");\n                                        } else {\n                                            this.add(\"%\");\n                                        }\n                                    }}/>\n                                </div>\n                                <div className=\"uk-grid uk-grid-small uk-child-width-1-4\">\n                                    <Button value=\"7\" color=\"default\" onClick={() => {this.add(\"7\");}}/>\n                                    <Button value=\"8\" color=\"default\" onClick={() => {this.add(\"8\");}}/>\n                                    <Button value=\"9\" color=\"default\" onClick={() => {this.add(\"9\");}}/>\n                                    <Button value=\"/\" color=\"secondary\" onClick={() => {\n                                        if (input.length === 0) {\n                                            this.add(placeholder + \"/\");\n                                        } else {\n                                            this.add(\"/\");\n                                        }\n                                    }}/>\n                                </div>\n                                <div className=\"uk-grid uk-grid-small uk-child-width-1-4\">\n                                    <Button value=\"4\" color=\"default\" onClick={() => {this.add(\"4\");}}/>\n                                    <Button value=\"5\" color=\"default\" onClick={() => {this.add(\"5\");}}/>\n                                    <Button value=\"6\" color=\"default\" onClick={() => {this.add(\"6\");}}/>\n                                    <Button value=\"x\" color=\"secondary\" onClick={() => {\n                                        if (input.length === 0) {\n                                            this.add(placeholder + \"x\");\n                                        } else {\n                                            this.add(\"x\");\n                                        }\n                                    }}/>\n                                </div>\n                                <div className=\"uk-grid uk-grid-small uk-child-width-1-4\">\n                                    <Button value=\"1\" color=\"default\" onClick={() => {this.add(\"1\");}}/>\n                                    <Button value=\"2\" color=\"default\" onClick={() => {this.add(\"2\");}}/>\n                                    <Button value=\"3\" color=\"default\" onClick={() => {this.add(\"3\");}}/>\n                                    <Button value=\"+\" color=\"secondary\" onClick={() => {\n                                        if (input.length === 0) {\n                                            this.add(placeholder + \"+\");\n                                        } else {\n                                            this.add(\"+\");\n                                        }\n                                    }}/>\n                                </div>\n                                <div className=\"uk-grid uk-grid-small uk-child-width-1-4\">\n                                    <Button value=\"0\" color=\"default\" onClick={() => {this.add(\"0\");}}/>\n                                    <Button value=\".\" color=\"default\" onClick={() => {this.add(\".\");}}/>\n                                    <Button value=\"=\" color=\"primary\" onClick={() => {\n                                        const {inputHandler} = this.props;\n                                        const tree = inputHandler.generateArithmeticTree();\n                                        if (tree === null) return;\n                                        const answer = this.calculate(tree).toString();\n                                        const recent = history.concat({input: input, answer: answer})\n                                        this.setState({history: recent, input: \"\", placeholder: answer});\n                                    }}/>\n                                    <Button value=\"-\" color=\"secondary\" onClick={() => {this.add(\"-\");}}/>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"uk-padding-remove uk-width-1-3\">\n                        <div className=\"socials\">\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nfunction History(props) {\n    const {history, onClick} = props;\n    const list = history.map((element, index, history) => {\n        const reverseIndex = history.length - 1 - index;\n        const {input, answer} = history[reverseIndex];\n        const key = reverseIndex;\n        let divider = <></>;\n        if (reverseIndex !== 0) {\n            divider = <hr className=\"uk-margin-remove\"></hr>\n        }\n        return (\n            <>\n                <li key={key} className=\"history-item uk-text-right uk-margin-remove uk-padding-small\">\n                    <p className=\"uk-link uk-text-large uk-margin-remove\" onClick={() => {onClick(reverseIndex, \"input\");}}>{input}</p>\n                    <p className=\"uk-text-small uk-margin-remove\">ANS=<span className=\"uk-link\" onClick={() => {onClick(reverseIndex, \"answer\");}}>{answer}</span></p>\n                </li>\n                {divider}\n            </>\n        )\n    });\n    return (\n        <>\n            <h5 className=\"uk-text-right uk-text-large uk-text-white\"><b>History</b></h5>\n            <div className=\"uk-card uk-card-default uk-card-body uk-border-rounded uk-padding-remove\">\n                <ul className=\"uk-list uk-width-1-1 uk-margin-remove uk-height-medium uk-overflow-auto\">{list}</ul>\n            </div>\n        </>\n    );\n}\n\n\nfunction Input(props) {\n    const {value, placeholder, onChange, disabled} = props;\n    return (\n        <div className=\"uk-width-1-1\">\n            <input className=\"uk-width-1-1 uk-padding-remove uk-margin-remove uk-text-right uk-text-large\" type=\"text\" value={value} placeholder={placeholder} onChange={onChange} disabled={disabled}/>\n        </div>\n    )\n}\n\n\nfunction Button(props) {\n    const {value, color, onClick} = props;\n    let className = \"uk-button uk-text-center uk-text-large uk-padding-remove uk-width-1-1\";\n    className = classNames(className, \"uk-button-\" + color);\n    return (\n        <div>\n            <input className={className} type=\"button\" value={value} onClick={onClick}/>\n        </div>\n    )\n}\n\n\nReactDom.render(\n    <Calculator inputHandler={new InputHandler()}/>,\n    document.getElementById('root')\n)"],"sourceRoot":""}